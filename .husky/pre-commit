#!/bin/sh

# Exit on any error
set -e

echo "üîç Running pre-commit checks..."

# 1. Check for documentation in root directory (except README.md and CLAUDE.md)
echo "üìÅ Checking file organization..."
ROOT_DOCS=$(ls *.md 2>/dev/null | grep -v README.md | grep -v CLAUDE.md || true)
if [ ! -z "$ROOT_DOCS" ]; then
  echo "‚ùå Error: Documentation files found in root directory!"
  echo "   The following files should be moved to documentation/ folder:"
  echo "$ROOT_DOCS" | sed 's/^/     - /'
  echo ""
  echo "   Please move them to the appropriate subfolder:"
  echo "     - documentation/technical/ for architecture docs"
  echo "     - documentation/guides/ for how-to guides"
  echo "     - documentation/changes/ for migration/change logs"
  exit 1
fi

# 2. Clean up test artifacts
echo "üßπ Cleaning test artifacts..."
rm -rf test-results/* 2>/dev/null || true
rm -rf screenshots/* 2>/dev/null || true
echo "   ‚úÖ Test artifacts cleaned"

# 3. Check for large files (>500 lines)
echo "üìè Checking file sizes..."
LARGE_FILES=$(find app components features -name "*.tsx" -o -name "*.ts" 2>/dev/null | while read file; do
  lines=$(wc -l < "$file" 2>/dev/null || echo 0)
  if [ "$lines" -gt 500 ]; then
    echo "$file:$lines"
  fi
done || true)

if [ ! -z "$LARGE_FILES" ]; then
  echo "‚ö†Ô∏è  Warning: Large files detected (>500 lines):"
  echo "$LARGE_FILES" | while IFS=: read file lines; do
    echo "     - $file ($lines lines)"
  done
  echo "   Consider refactoring these files into smaller modules."
fi

# 4. Check for components over 200 lines
LARGE_COMPONENTS=$(find components -name "*.tsx" 2>/dev/null | while read file; do
  lines=$(wc -l < "$file" 2>/dev/null || echo 0)
  if [ "$lines" -gt 200 ]; then
    echo "$file:$lines"
  fi
done || true)

if [ ! -z "$LARGE_COMPONENTS" ]; then
  echo "‚ö†Ô∏è  Warning: Large components detected (>200 lines):"
  echo "$LARGE_COMPONENTS" | while IFS=: read file lines; do
    echo "     - $file ($lines lines)"
  done
  echo "   Consider breaking these into smaller components."
fi

# 5. Check for .DS_Store files
echo "üóëÔ∏è  Removing .DS_Store files..."
find . -name ".DS_Store" -type f -delete 2>/dev/null || true

# 6. Check for console.log statements (warn only)
echo "üîç Checking for console.log statements..."
CONSOLE_LOGS=$(grep -r "console\.log" --include="*.ts" --include="*.tsx" app components features 2>/dev/null | grep -v "// eslint-disable" || true)
if [ ! -z "$CONSOLE_LOGS" ]; then
  echo "‚ö†Ô∏è  Warning: console.log statements found:"
  echo "$CONSOLE_LOGS" | head -5 | sed 's/^/     /'
  echo "   Consider removing these before production."
fi

# 7. Run TypeScript type checking (TEMPORARILY DISABLED FOR DEPLOYMENT)
echo "üîß Skipping TypeScript type check for emergency deployment..."
echo "   ‚ö†Ô∏è  TypeScript checking temporarily disabled"
# if [ -f "tsconfig.json" ]; then
#   echo "   Checking TypeScript compilation..."
#   if ! npx tsc --noEmit --skipLibCheck 2>/dev/null; then
#     echo "‚ùå TypeScript errors detected!"
#     echo "   Run 'npm run typecheck' or 'npx tsc --noEmit' to see detailed errors."
#     echo "   Fix TypeScript errors before committing."
#     exit 1
#   else
#     echo "   ‚úÖ TypeScript compilation passed"
#   fi
# fi

# 8. Run linting (if it passes quickly)
echo "üé® Running quick lint check..."
if [ -d "app" ]; then
  npx eslint --max-warnings 10 --quiet app --ext .ts,.tsx 2>/dev/null || {
    echo "‚ö†Ô∏è  Warning: Some linting issues detected. Run 'npm run lint' to see all issues."
  }
fi

echo "‚úÖ Pre-commit checks completed!"
