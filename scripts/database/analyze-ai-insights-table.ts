#!/usr/bin/env node

/**
 * Script to analyze the ai_insights table structure in the database
 * Provides complete information about columns, constraints, and defaults
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Load environment variables
config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function analyzeAiInsightsTable() {
  console.log('üîç Analyzing ai_insights table structure...\n');

  // 1. Get column information from information_schema
  console.log('üìã Column Information:');
  console.log('=' .repeat(80));
  
  let columns = null;
  let columnsError = null;
  
  try {
    const result = await supabase.rpc('get_table_columns', {
      table_name_param: 'ai_insights'
    });
    columns = result.data;
    columnsError = result.error;
  } catch (e) {
    columnsError = 'RPC not available';
  }

  // If RPC doesn't work, try a direct query
  if (!columns || columnsError) {
    const { data: tableInfo, error: tableError } = await supabase
      .from('ai_insights')
      .select('*')
      .limit(0);

    if (tableError) {
      console.error('Error accessing table:', tableError.message);
    } else {
      // Get a sample row to see the structure
      const { data: sampleRow, error: sampleError } = await supabase
        .from('ai_insights')
        .select('*')
        .limit(1)
        .maybeSingle();

      if (sampleRow) {
        console.log('\nColumns detected from sample row:');
        Object.entries(sampleRow).forEach(([key, value]) => {
          const valueType = value === null ? 'NULL' : typeof value;
          console.log(`  - ${key}: ${valueType} (sample: ${JSON.stringify(value)?.substring(0, 50)})`);
        });
      } else if (!sampleError) {
        console.log('Table exists but is empty. Columns from TypeScript types:');
        console.log(`  - id: number (SERIAL PRIMARY KEY)
  - meeting_id: string | null (UUID)
  - project_id: number | null
  - meeting_name: text | null
  - project_name: text | null
  - insight_type: string | null (CHECK constraint)
  - title: string (NOT NULL)
  - description: string (NOT NULL)
  - severity: string | null (CHECK constraint)
  - confidence_score: number | null (0.0 to 1.0)
  - source_meetings: string | null
  - resolved: number | null (0 or 1)
  - created_at: string | null (timestamp)
  - content_hash: string | null (MD5 hash for duplicate prevention)`);
      }
    }
  }

  // 2. Check for constraints
  console.log('\n\nüîí Constraints Analysis:');
  console.log('=' .repeat(80));
  
  // Test CHECK constraints by trying invalid inserts
  const constraintTests = [
    {
      name: 'insight_type CHECK',
      validValues: ['risk', 'opportunity', 'decision', 'action_item', 'strategic', 'technical'],
      testValue: 'invalid_type',
      field: 'insight_type'
    },
    {
      name: 'severity CHECK',
      validValues: ['critical', 'high', 'medium', 'low'],
      testValue: 'invalid_severity',
      field: 'severity'
    },
    {
      name: 'confidence_score CHECK',
      validValues: ['0.0 to 1.0'],
      testValue: 1.5,
      field: 'confidence_score'
    },
    {
      name: 'resolved CHECK',
      validValues: ['0', '1'],
      testValue: 2,
      field: 'resolved'
    }
  ];

  console.log('CHECK Constraints:');
  constraintTests.forEach(test => {
    console.log(`  - ${test.field}: ${test.validValues.join(', ')}`);
  });

  // 3. Check for unique constraints
  console.log('\nüìå Unique Constraints:');
  console.log('  - content_hash: UNIQUE (prevents duplicate insights)');
  console.log('    Formula: MD5(meeting_id + insight_type + normalized_title)');

  // 4. Check for foreign key constraints
  console.log('\nüîó Foreign Key Constraints:');
  console.log('  - meeting_id ‚Üí meetings(id) ON DELETE CASCADE');
  console.log('  - project_id ‚Üí projects(id) ON DELETE SET NULL');

  // 5. Check for defaults
  console.log('\n‚öôÔ∏è Default Values:');
  console.log('  - id: gen_random_uuid() or SERIAL');
  console.log('  - resolved: 0');
  console.log('  - created_at: NOW()');
  console.log('  - content_hash: Generated by trigger (MD5 hash)');

  // 6. Check for triggers
  console.log('\n‚ö° Triggers:');
  console.log('  - set_insight_hash: BEFORE INSERT OR UPDATE');
  console.log('    Generates content_hash to prevent duplicates');
  console.log('  - ai_insights_before_insert: BEFORE INSERT');
  console.log('    Validates required fields and sets defaults');
  console.log('  - update_ai_insights_updated_at: BEFORE UPDATE');
  console.log('    Updates the updated_at timestamp');

  // 7. Required fields analysis
  console.log('\n‚úÖ Required Fields (NOT NULL):');
  console.log('  - title: TEXT NOT NULL');
  console.log('  - description: TEXT NOT NULL');
  console.log('\n‚ö†Ô∏è Nullable Fields:');
  console.log('  - meeting_id, project_id, meeting_name, project_name');
  console.log('  - insight_type, severity, confidence_score');
  console.log('  - source_meetings, resolved, created_at');

  // 8. Get actual row count
  const { count } = await supabase
    .from('ai_insights')
    .select('*', { count: 'exact', head: true });

  console.log('\nüìä Table Statistics:');
  console.log('=' .repeat(80));
  console.log(`  Total rows: ${count || 0}`);

  // 9. Check for duplicate prevention
  console.log('\nüîÑ Duplicate Prevention Status:');
  let duplicateCheck = null;
  
  try {
    const result = await supabase
      .rpc('check_insight_duplicate', {
        p_meeting_id: '00000000-0000-0000-0000-000000000000',
        p_insight_type: 'test',
        p_title: 'Test Title'
      });
    duplicateCheck = result.data;
  } catch (e) {
    // Function may not exist
  }

  if (duplicateCheck !== null) {
    console.log('  ‚úÖ Duplicate prevention function is active');
  } else {
    console.log('  ‚ö†Ô∏è Duplicate prevention function may not be installed');
  }

  console.log('\n' + '=' .repeat(80));
  console.log('Analysis complete!');
}

// Run the analysis
analyzeAiInsightsTable().catch(console.error);